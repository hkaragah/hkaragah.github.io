Traceback (most recent call last):
  File "c:\Hossein\portfolio\.venv\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "c:\Hossein\portfolio\.venv\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "c:\Hossein\portfolio\.venv\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\hkara\AppData\Local\Programs\Python\Python313\Lib\asyncio\base_events.py", line 720, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "c:\Hossein\portfolio\.venv\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "c:\Hossein\portfolio\.venv\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "c:\Hossein\portfolio\.venv\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import openseespy.opensees as ops
import vfo.vfo as vfo


ops.wipe()
ops.model('basic', '-ndm', 2, '-ndf', 3)

nSEG = 10
baseNodeTag = 0
nodeTags = [baseNodeTag]
ops.node(baseNodeTag, 0, 0) # Base node
for i in range(1, nSEG+1):
    nodeTag = i
    ops.node(nodeTag, 0, i*L/nSEG)
    nodeTags.append(nodeTag)

# Fixed base nodes
ops.fix(0, 1, 1, 1)

coordTransf = "Corotational"  # Linear, PDelta, Corotational
transfTag = 111
ops.geomTransf(coordTransf, transfTag)

# hf = 2 * tf
# ks = (6+6*(hf/d)*2)/(5+5*(hf/d)**2)
secTag = 230
ops.section('Elastic', secTag, E, A, Iz, G, alphaY)

intPoints = 3
intTag = 520
ops.beamIntegration('Lobatto', intTag, secTag, intPoints) # 'Lobatto', 'Legendre', 'NewtonCotes'

eleTags = []
for i in range(nSEG):
    eleTag = 1000 + i
    eleNodes = [i, i+1]
    ops.element('elasticBeamColumn', eleTag, *eleNodes, secTag, transfTag, intTag)
    eleTags.append(eleTag)

timeSeriesTag = 1
ops.timeSeries("Linear", timeSeriesTag)

patternTag = 1
ops.pattern("Plain", patternTag, timeSeriesTag)

ops.load(nSEG, Ni, -Pu, 0)

ops.system('BandGen')
ops.numberer('Plain') # Plain, RCM, AMD
ops.constraints("Plain") # Plain, Transformation
ops.algorithm('Newton') # Linear, Newton, KrylovNewton, KrylovNewtonWithInertia, ...
ops.test('NormDispIncr', 1.0e-6, 10)

numIncr = 10
ops.integrator('LoadControl', 1.0/numIncr) # LoadControl, DisplacementControl, FixedNumIter

ops.analysis('Static') # Static, Transient, VariableTransient, PFEM

# ops.database('File', 'cant_col_p_delta')

ops.recorder('Node', '-file', 'node_disp.out', '-time', '-node', nodeTags[-1], '-dof', 1, 2, 3, 'disp')
ops.recorder('Node', '-file', 'reaction.out', '-time', '-node', nodeTags[0], '-dof', 1, 2, 3, 'reaction')
ops.recorder('Element', '-file', 'ele_force.out', '-time', '-ele', *eleTags, 'force')

vfo.createODB(model='cant_col_p_delta', loadcase='static')

flag = ops.analyze(numIncr)
if  flag != 0:
    print("Analysis failed!")
else:
    print("Analysis completed successfully.")
------------------


[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[9][39m[32m, line 1[39m
[32m----> [39m[32m1[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mopenseespy[39;00m[34;01m.[39;00m[34;01mopensees[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mops[39;00m
[32m      2[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mvfo[39;00m[34;01m.[39;00m[34;01mvfo[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mvfo[39;00m
[32m      5[39m ops.wipe()

[31mModuleNotFoundError[39m: No module named 'openseespy'

